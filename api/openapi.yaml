openapi: 3.0.1
info:
  contact:
    email: lampralexandros@gmail.com
  description: This is a sample openApi document
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://wabli.netlify.app/
  title: TempApi
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- description: miniature-parakeet
  url: http://83.212.100.226:3002/v1
security:
- {}
tags:
- description: not yet ready
  name: project
- description: not yet ready
  name: card
paths:
  /project:
    post:
      operationId: createproject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project'
        description: data to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
          description: successful operation
      summary: Creates the data
      tags:
      - project
      x-eov-operation-handler: controllers/ProjectController
  /project/{projectId}:
    delete:
      operationId: deleteproject
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: successful operation
      summary: Delete the element
      tags:
      - project
      x-eov-operation-handler: controllers/ProjectController
    get:
      operationId: getproject
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
          description: successful operation
      summary: Get the element
      tags:
      - project
      x-eov-operation-handler: controllers/ProjectController
    put:
      operationId: updateproject
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project'
        description: data to be updated
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
          description: successful operation
      summary: Updates the element
      tags:
      - project
      x-eov-operation-handler: controllers/ProjectController
  /project/getAll:
    get:
      operationId: getAllproject
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/project'
                type: array
          description: successful operation
      summary: Get all the data
      tags:
      - project
      x-method-getAll: "true"
      x-eov-operation-handler: controllers/ProjectController
  /card:
    post:
      operationId: createcard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card'
        description: data to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card'
          description: successful operation
      summary: Creates the data
      tags:
      - card
      x-eov-operation-handler: controllers/CardController
  /card/{cardId}:
    delete:
      operationId: deletecard
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: cardId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: successful operation
      summary: Delete the element
      tags:
      - card
      x-eov-operation-handler: controllers/CardController
    get:
      operationId: getcard
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: cardId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card'
          description: successful operation
      summary: Get the element
      tags:
      - card
      x-eov-operation-handler: controllers/CardController
    put:
      operationId: updatecard
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: cardId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card'
        description: data to be updated
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card'
          description: successful operation
      summary: Updates the element
      tags:
      - card
      x-eov-operation-handler: controllers/CardController
  /card/getAll:
    get:
      operationId: getAllcard
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/card'
                type: array
          description: successful operation
      summary: Get all the data
      tags:
      - card
      x-method-getAll: "true"
      x-eov-operation-handler: controllers/CardController
components:
  schemas:
    project:
      example:
        projectEntity:
        - ""
        - ""
        projectDescription: projectDescription
        _id: _id
        projectName: projectName
      properties:
        _id:
          type: string
        projectName:
          type: string
        projectDescription:
          type: string
        projectEntity:
          items:
            oneOf:
            - $ref: '#/components/schemas/card'
            - type: string
            x-one-of-name: card
          type: array
      required:
      - projectDescription
      - projectEntity
      - projectName
      type: object
    card:
      example:
        cardName: cardName
        _id: _id
        cardDescription: cardDescription
      properties:
        _id:
          type: string
        cardName:
          type: string
        cardDescription:
          type: string
      required:
      - cardDescription
      - cardName
      type: object
